****************************************************
*             Introduction to Stata                *
****************************************************

***GENERAL***

* DO NOT SAVE THE DATA AFTER CHANGING IT.
* SAVING THE MODIFIED DATASET OVER THE ORIGINAL DATA ERASES THE ORIGINAL - NO GOING BACK!
* INSTEAD, SAVE THE MODIFIED DATA AS A NEW DATASET.
* THIS WAY, IF SOMETHING WENT WRONG, YOU CAN STILL ACCESS THE ORIGINAL DATASET.

* YOU CAN CHANGE THE LANGUAGE UNDER "PREFERENCES" - "USER-INTERFACE LANGUAGE" (RESTARTING STATA REQUIRED).

* WE USE A DO-FILE THAT CONTAINS OUR STATA CODE, AND WHICH YOU RECOGNIZE FROM THE ENDING '.do'.
* WHY DO WE USE A DO-FILE INSTEAD OF JUST TYPING COMMANDS INTO THE COMMAND WINDOW?
* USING DO-FILES ALLOWS US TO DOCUMENT WHAT WE HAVE DONE AND TO QUICKLY AND EASILY REPLICATE/MODIFY OUR/OTHERS WORK.

* THE DO-FILE CONTAINS TEXT IN DIFFERENT COLOURS.
* GREEN = COMMENTARY, BLUE = COMMANDS, RED = TEXT, BLACK = VARIABLES NAMES.
* ADDING A STAR IN FRONT OF TEXT TELLS STATA YOU ARE WRITING COMMENTARY AND NOT COMMANDS, OR 
// FOR COMMENTS

/* YOU CAN ALSO USE 
THIS NOTATION  
WITH SLASHES AND STARS 
TO WRITE SEVERAL LINES OF COMMENTS. */

* YOU CAN RUN A SPECIFIC LINE OF CODE BY HIGHLIGHTING IT AND PRESSING CTRL+D.
* CLICKING THE 'Execute' ICON OR PRESSING CTRL+D WITHOUT HIGHGLIGHTING A SPECIFIC LINE RUNS THE ENTIRE DO-FILE.



***SETTING THE WORKING DIRECTORY***

* SETTING THE DIRECTORY TELLS STATA THAT COMMANDS REFER TO A SPECIFIC FOLDER ON YOUR COMPUTER.
* YOU HAVE TO INSERT THE CORRECT PATH NAME FOR YOUR OWN FILE LOCATION IN QUOTATION MARKS.
* RUN AN INTERNET SEARCH ON HOW TO FIND THE PATH NAME ON YOUR COMPUTER IF UNSURE HOW TO FIND IT.
clear // // clear Stata memory
cd "C:\Users\ka8240ho\Work Folders\Documents\Teaching\Econometrics II 2022\EKHM66 Econometrics II Labs and assignments HT2022\Introduction to Stata"
* 'cd' IS SHORT FOR 'change directory'.
* set your own directory! A folder where you store all files (data, dofile, and more) for e.g., introduction or Lab 1.



***LOADING DATA****

* STATA CAN BE USED WITH DIFFERENT TYPES OF DATA FILES/FORMATS.
* OFTEN DATA ARE IN '.dta' FORMAT, WHICH IS THE BASIC FORMAT IN STATA.

use Introduction_to_Stata_data1.dta, clear
* STATA USES MANY 'options'. OPTIONS ALWAYS COME AFTER A COMMA. HERE, THE OPTION IS CALLED 'clear'.
* 'clear' TELLS STATA TO REMOVE ANY DATA THAT MAY CURRENTLY BE IN ITS MEMORY BEFORE OPENING THE NEW FILE.
* IF YOU DO NOT SPECIFY 'clear', STATA WILL NOT BE ABLE TO OPEN THE FILE IF ANOTHER DATA SET IS ALREADY OPEN.
* IN THIS SITUATION, WHEN WE TELL STATA 'use', WE ARE SPECIFYING TO USE A FILE FROM THE WORKING DIRECTORY.
* IF THE FILE YOU WANT TO USE IS NOT IN THE WORKING DIRECTORY, STATA WILL NOT DETECT IT OR OPEN IT.



***STARTING A LOG FILE***

* LOG FILES ARE A WAY FOR YOU TO RECORD WHAT YOU DO WHILE WORKING IN STATA.
* LATER, WHEN YOU RUN MANY REGRESSIONS OR CROSS-TABS, IT IS USEFUL TO BE ABLE TO JUST LOOK IN YOUR LOG TO SEE THE RESULTS.
* WHILE THE DO-FILE SHOWS ONLY THE CODE WE USED, THE LOG FILE SHOWS BOTH THE CODE USED AND THE RESULTS IT PRODUCED.

log using "Introduction_to_Stata.log", replace
* HERE THE OPTION SPECIFIED IS 'replace' WHICH TELLS STATA TO WRITE OVER THE FILE CALLED 'Stata_Introduction.log'.
* IF NO SUCH FILE EXISTS, STATA WILL CREATE ONE.
* THE CONTENT WILL BE THE OUTPUT FOLLOWING THE COMMAND 'log using "Stata_Introduction.log".
* '.log' FILES CAN BE OPENED USING NOTEPAD OR SIMILAR PROGRAMS.



***INSPECTING THE DATASET***

* THERE ARE A NUMBER OF WAYS TO INSPECT DATA IN STATA.
* SOME ARE USEFUL FOR EXAMINING THE DATA'S STATISTICAL PROPERTIES AND SOME FOR EXAMINING ITS TECHNICAL PROPERTIES. 

* CLICK ON THE TOOLBAR IMAGE WITH A TABLE AND A MAGNIFYING GLASS TO VIEW THE DATASET. OR USE THE COMMAND:
browse
* ALWAYS ACQUIANT YOURSELF WITH A NEW DATASET BY VIEWING.


describe
* 'describe' TELLS US SOME OF THE TECHNICAL AND PRACTICAL DETAILS OF OUR DATA.
* IT TELLS US THE VARIABLE NAME, HOW IT IS STORED IN THE COMPUTER, AND ITS DEFINITION.

help data type
* BUT IF YOU ARE NEW TO STATA, THESE 'storage types' ARE NOT VERY HELPFUL FOR UNDERSTANDING WHAT THESE VARIABLES ARE.
* BY TYPING 'help...' IN THE COMMAND PROMPT, WE CAN FIND OUT WHAT THESE MEAN.

* THERE ARE TWO BASIC STORAGE TYPES: ALPHABETICAL AND NUMERICAL
* THERE ARE SEVERAL DIFFERENT NUMERICAL STORAGE TYPES. 'byte', 'int' AND 'long' ARE ALL INTEGER STORAGE TYPES (I.E. NO DECIMAL PLACES)
* 'float' AND 'double' ARE DECIMAL STORAGE TYPES.
* 'STRINGS' (IN THE ABOVE EXAMPLE IT IS WRITTEN AS 'str9') ARE ALPHABETICAL AND OFTEN CANNOT BE USED FOR STATISTICAL ANALYSIS.
* SOMETIMES YOU MAY NEED TO CONVERT VARIABLES FROM STRING TO NUMERICAL OR VICE VERSA (BUT LET'S LEAVE THAT FOR NOW)

compress
* COMPRESSING YOUR DATA CAN SAVE A LOT OF SPACE WHEN WORKING WITH LARGER DATASETS.
* SIMPLY RUN THE COMMAND 'compress' TO STORE YOUR VARIABLES MORE EFFICIENTLY.
* THIS WILL MAKE SURE THAT STATA DOES NOT ALLOCATE MORE MEMORY TO A VARIABLE THAN IS NECESSARY.

inspect age
* 'inspect' IS A SIMPLE COMMAND THAT TELLS US USEFUL INFORMATION ABOUT A VARIABLE.
* IT TAKES UP A LOT OF SCREEN SPACE THOUGH IF YOU USE IT FOR ALL VARIABLES AT ONCE.
* THE COMMAND ALSO PROVIDES A SMALL HISTOGRAM

codebook age
* 'codebook' IS ANOTHER WAY TO INSPECT A VARIABLE. 

codebook nr_of_kids
* IT IS USEFUL FOR LOOKING AT THE VALUES OF CATEGORICAL VARIABLES.



list var7
* WE CAN SPECIFY TO VIEW ONE OR SEVERAL VARIABLES.

list 
* THE 'list' COMMAND SHOWS THE ENTIRE DATASET IN THE OUTPUT WINDOW.
* BY TYPING 'list', STATA DISPLAYS ALL OF THE DATA FOR THE GIVEN VARIABLE ON THE SCREEN.
* AS WE ONLY HAVE 50 OBSERVATIONS, IT IS FEASIBLE TO LIST ALL OF THEM ON THE SCREEN.
* IF WE HAD A LARGE DATASET, STATA WOULD MAKE BREAKS IN BETWEEN.
* IN OTHER WORDS, IF THERE IS A LONG OUTPUT COMING UP, STATA WILL INTERRUPT RUNNING THE DO-FILE.
* TO CONTINUE RUNNING THE CODE, YOU THEN HAVE TO CLICK 'more' IN THE OUTPUT WINDOW.
* THIS CAN BE INCONVENIENT AS WE OFTEN WORK WITH LARGE DATASETS AND/OR COMPLICATED MODELS.

set more off, permanently
* THIS COMMAND TELLS STATA TO PUT All OF THE OUTPUT ON THE SCREEN WITHOUT BREAKS. 
* IF YOU 'set more off' YOUR CODE CAN COMPLETE RUNNING AND YOU CAN LOOK BACK AT THE LOG FILE AT A LATER POINT TO SEE THE COMPLETE OUTPUT.




////////////////////////////////////// maybe about syntax help list

list var7 in 36/44
* WHEN WE TYPE 'in 36/44' IT TELLS STATA TO ONLY LIST OBSERVATIONS 36 TO 44.

cap noisily list Var7
* THE RED OUTPUT TELLS US THERE WAS A MISTAKE IN THE CODE. 
* IF YOU A RUNNING A DO-FILE, THE REST OF THE CODE WILL NOT RUN WHEN STATA RUNS INTO A MISTAKE.
* STATA IS CASE SENSITIVE. ALL COMMANDS MUST BE WRITTEN IN LOWER CASE.
* YOU CAN NAME VARIABLES WITH UPPER CASE LETTERS, BUT THEN MUST WRITE THEM UPPER CASE IN THE COMMANDS.
* IT IS EASIER TO JUST USE LOWER CASE ALL OF THE TIME.
* THE 'cap noisily' PRE-COMMAND TELLS STATA TO CONTINUE RUNNING THE DO-FILE DESPITE THE ERROR, WHILE STILL SHOWING THE ERROR MESSAGE.

browse 
* THE 'browse' COMMAND IS EQUIVALENT TO CLICKING THE ICON WITH A TABLE AND A MAGNIFYING GLASS.
* IT ALLOWS US TO VIEW THE DATASET, AND IS OFTEN MORE CONVENIENT THAN 'list'.
* ONLY TYPING 'browse' WILL SHOW US THE ENTIRE DATASET. BUT WE CAN BE MORE PRECISE.

browse nr_of_kids
* WE CAN SPECIFY ONE OR MORE VARIABLES TO VIEW.

br nr_of_kids if wife_present==1
* TYPING 'browse nr_of_kids' WILL SHOW US ONLY THAT VARIABLE
* TYPING 'if wife_present==1' AFTER THE COMMAND SPECIFIES THAT WE ONLY WANT TO SEE THE NUMBER OF KIDS IN A HOUSEHOLD WHEN A WIFE IS PRESENT.
* STATA OFTEN RECOGNIZES ABBREVIATIONS OF COMMANDS. IN THIS CASE, 'br' IS THE SAME AS 'browse'.

tab education
* USING THE 'tab' COMMAND, WE GET A BASIC ONE-WAY FREQUENCY TABLE TELLING US HOW MANY OBSERVATIONS THERE ARE IN EACH CATEGORY. 

tab education nr_of_kids
* BY SPECIFYING A SECOND VARIABLE WE GET A TWO-WAY FREQUENCY TABLE.

tab education nr_of_kids, row
tab education nr_of_kids, column
* USING THE OPTIONS 'row' OR 'column' GIVES US THE PERCENTAGES IN EACH CELL WITH REGARD TO EITHER THE ROW OR THE COLUMN CATEGORY.

tab education nr_of_kids, column nofreq
* FURTHER SPECIFYING THE OPTION 'nofreq' TELLS STATA THAT WE ONLY WANT PERCENTAGES AND NOT THE FREQUENCIES (I.E. NUMBER OF OBSERVATIONS IN THE CATEGORY)
* THIS MAKES IT A BIT EASIER TO LOOK AT THE TABLE.



***RENAMING VARIABLES AND CREATING LABELS***

* SOMETIMES DATASETS COME WITH AMBIGUOUS OR INCONVENIENT VARIABLE NAMES.
* IT IS USEFUL TO RENAME THEM INTO SOMETHING YOU AND OTHERS CAN EASILY INTERPRET.

rename var7 name
* WE TYPE THE COMMAND 'rename' FOLLOWED BY THE CURRENT VARIABLE NAME AND THEN THE NAME WE WISH TO GIVE IT.
* IN THIS INSTANCE, THE VARIABLE IS CURRENTLY NAMED 'var7' AND WE WANT TO RENAME IT 'name'

label variable name "First name"
describe
* NOT ONLY CAN WE CHANGE THE VARIABLE NAME, BUT WE CAN ALSO ADD A DESCRIPTION TO IT FOR OUR OWN PERSONAL USE.



***CREATING A CATEGORICAL VARIABLE FROM CONTINUOUS VARIABLE***

* INSTEAD OF USING A CONTINUOUS FORM OF THE EDUCATION VARIABLE (I.E. YEARS) WE WANT TO HAVE CATEGORIES.
* THIS IS COMMON PRACTICE, AS IT IS USUALLY NOT THE YEARS SPENT IN SCHOOL, BUT RATHER THE DEGREE EARNED THAT DICTATES THINGS LIKE WAGES AND EMPLOYMENT.

* TO DO THIS, WE WILL USE THE COMMANDS 'generate' AND 'replace'.
* 'generate' CREATES AN ENTIRELY NEW VARIABLE (I.E. A NEW COLUMN IN YOUR DATASET).
* 'replace' WILL EDIT AN ALREADY EXISTING VARIABLE.

* WHEN CREATING A CATEGORICAL VARIABLE, THINK ABOUT THE MOST LOGICAL WAY TO CATEGORIZE THE CONTINOUS VARIABLE.
* LET'S CREATE A VARIABLE THAT CATEGORISES EDUCATION INTO PRIMARY, SECONDARY, AND TERTIARY.

generate edu=1 if education<=9
replace edu=2 if education>=10 & education<=12
replace edu=3 if education>12
tab edu
* NOW WE HAVE CATEGORIES THAT MEET THE BASIC CRITERIA FOR A CATEGORICAL VARIABLE. THEY ARE:
*		A. MUTUALLY EXCLUSIVE (NO OVERLAP BETWEEN CATEGORIES)
*		B. ALL ENCOMPASSING (ALL VALUES OF THE VARIABLE ARE CAPTURED BY ONE OF THE CATEGORIES).

* BUT!
* YOU MUST CAREFULLY CHECK FOR MISSING VALUES!!!
* STATA CONSIDERS '.' AS POSITIVE INFINITY! 

codebook education
* WHEN WE RE-EXAMINE THE VARIABLE THAT OUR NEW CATEGORIES ARE BASED ON WE SEE THAT ONE MISSING VALUE WAS REPORTED.
* THE MISSING VALUE HAS ERRONEOUSLY BEEN PUT IN THE HIGHEST EDUCATIONAL CATEGORY.
* THIS CAN BE A BIG PROBLEM WHEN YOU RUN REGRESSIONS, AS IT CAN BIAS YOUR RESULTS.

drop edu
* 'drop' IS A COMMAND YOU SHOULD GET USED TO.  
* WHEN WE WORK WITH DATA WE OFTEN MAKE LOTS OF VARIABLES THAT EITHER ARE UNNECCESSARY, TEMPORARILY NECESSARY, OR WRONGLY DEFINED.

generate edu=1 if education<=9
replace edu=2 if education>=10 & education<=12
replace edu=3 if education>12 & education!=.
replace edu=4 if education==.
* HERE WE SPECIFY THAT THE TOP EDUCATIONAL LEVEL SHOULD BE BETWEEN 12 YEARS AND THE HIGHEST REAL NUMBER BEFORE INFINITY (I.E. MISSING VALUES).
* ANOTHER OPTION WOULD BE TO KEEP MISSING VALUES AS A CATEGORY OF THEIR OWN, SO THAT WE DO NOT LOSE THEM FROM THE ANALYSIS.
* IN THIS CASE WE COULD SPECIFY FOR EXAMPLE 'replace edu = 99 if education==.' TO MAKE A CATEGORY FOR MISSING VALUES.

tab education edu, missing
* WE CAN CHECK IF THE VALUES LOOK RIGHT BY TABULATING THE TWO VARIABLES.
* SPECIFYING 'missing' TELLS STATA WE ALSO WANT TO SEE THE OBSERVATIONS WITH MISSING VALUES ON 'education' (OTHERWISE THEY WILL NOT BE SHOWN).

label define edulbl 1 "Primary" 2 "Secondary" 3 "Tertiary" 4 "missing"
label variable edu "Educational Level"
label values edu edulbl
* 'label define' CREATES LABELS THAT ARE ASSIGNED TO SPECIFIC VALUES.
* 'label values' APPLIES THE CREATED LABELS TO THE DESIRED VARIABLE.

browse education edu
* NOTE THAT STATA SHOWS THE LABELS WE JUST DEFINED (IN BLUE) INS PLACE OF NUMERICAL VALUES.

codebook edu
* YOU CAN USE 'codebook' TO RE-CHECK WHAT THE LABELS REPRESENT.

gen flag=1 if education==.
* FLAGGING OBSERVATIONS THAT CONTAIN MISSING VALUES IS SOMETIMES BETTER THAN DROPPING THEM.
drop flag

drop if education==.
* CAREFULLY CONSIDER WHETHER DROPPING MISSING VALUES IS THE BEST OPTION.

* LET'S CREATE A CATEGORICAL VARIABLE FOR AGE.
generate agecat=1 if age<35
replace agecat=2 if age>=35 & age<=49
replace agecat=3 if age>=50 & age!=.
replace agecat=4 if age==.

tab age agecat

label define agelbl 1 "Young" 2 "Middle-aged" 3 "Mature" 
label values agecat agelbl
tab age agecat


***CREATING DUMMY VARIABLES FROM ANOTHER VARIABLE***
tab nr_of_kids
tabulate nr_of_kids, generate(kids_d)
* WE CAN USE 'tabulate' TO CREATE DUMMIES FROM A SPECIFIC VARIABLE.
* STATA CREATES VARIABLES kids_d1, kids_d2, kids_d3, etc. THAT TAKE ON VALUES 0 AND 1 ACCORDING TO HOW MANY KIDS THERE ARE.

sort nr_of_kids 
* WE SORT THE OBSERVATIONS ON NUMBER OF KIDS FOR EASIER VIEWING.

br nr_of_kids kids_d*
* WHEN WE HAVE MANY VARIABLES STARTING WITH THE SAME WORD, WE CAN ADD A STAR TO AVOID TYPING EACH VARIABLE SEPARATELY.
* STATA HAS CREATED A DUMMY kids_d1 TAKING VALUE 1 IF THE PERSON HAS NO KIDS AND 0 IF THEY HAVE ANY KIDS.
* kids_2 INDICATES OBSERVATIONS WHERE THE PERSON HAS ONE KID, ETC. 

label variable kids_d1 "No kids (0-1)"
label variable kids_d2 "One kid (0-1)"
label variable kids_d3 "Two kids (0-1)"
label variable kids_d4 "Three kids (0-1)"
label variable kids_d5 "Four kids (0-1)"

label define kidslbl 0 "No" 1 "Yes"
label values kids_d* kidslbl
* WE LABEL THE VALUES, TOO.

br nr_of_kids kids_d*
* NOW WE SEE THE VALUE LABELS OVER OF THE NUMERICAL VALUES.

* LET'S LABEL SOME OF VALUES OF THE REST OF THE VARIABLES.
label define homlbl 0 "Non-home owner" 1 "Home owner"  
label values home_owner homlbl

label define wiflbl 0 "Wife absent" 1 "Wife present" 
label values wife_present wiflbl

describe
* WE SEE THE NAMES, TYPES, AND LABELS OF THE VARIABLES.



***SUMMARY STATISTICS OF CONTINUOUS VARIABLES***

* IT IS USEFUL TO BE ABLE TO TEST FOR NORMALITY IN STATA AS IT IS SOMETIMES REQUIRED FOR THE VALIDITY OF OUR METHODS.
* FOR EXAMPLE, LINEAR AND NON-LINEAR REGRESSION ASSUME THAT REDIDUALS ARE NORMALLY DISTRIBUTED.
* SOME HYPOTHESIS TEST ASSUME THE DATA TO FOLLOW A NORMAL DISTRIBUTION.
* LET'S LOOK AT MEASURES OF CENTRAL TENDENCY, WHICH TELL US HOW OUR DATA ARE DISTRIBUTED. 

sum age labor_income
* THE COMMAND 'sum' GIVES US THE BASICS OF THE VARIABLES' DISTRIBUTION (I.E. MEAN, STANDARD DEVIATION, MINIMUM AND MAXIMUM).

sum labor_income, detail
* BY SPECIFYING THE 'detail' OPTION, WE GET A BIT MORE INFORMATION (E.G. PERCENTILES, SKEWNESS, KURTOSIS).

tab edu, sum(labor_income)
* THE 'tab' AND 'sum' COMMANDS CAN BE USED TOGETHER TO GET SUMMARY STATISTICS ALONG WITH FREQUENCIES.
* THIS IS AN EXTREMELY USEFUL WAY TO UNDERSTAND YOUR DATA, ESPECIALLY ACROSS CATEGORIES.

centile labor_income, centile(0 (10) 100)
centile labor_income, centile(25 50 75)
* USING THE 'centile' COMMAND, WE ESTIMATE SPECIFIED CENTILES.

histogram labor_income, percent normal bin(30)
* A HISTOGRAM IS A SIMPLE WAY TO SEE HOW YOUR DATA ARE DISTRIBUTED.
* THE OPTION 'normal' OVERLAYS A NORMAL DISTRIBUTION PLOT ONTO YOUR DATA TO GIVE YOU AN IDEA OF HOW YOUR DATA COMPARE.
* THE OPTION 'percent' TELLS STATA TO REPORT THE HISTOGRAM IN TERMS OF PERCENTAGES INSTEAD OF DEFAULT, WHICH IS DENSITY.
* 'bin(X)' TELLS STATA TO USE X NUMBER OF CATEGORIES IN THE HISTOGRAM ON THE X-AXIS; YOU CAN PLAY AROUND WITH THIS AS YOU WISH.
* THE GOAL IS TO GET A GRAPH THAT HELPS US UNDERSTAND THE DATA BETTER.  

histogram labor_income if labor_income<100000, percent normal bin(10)
* MANY COMMANDS CAN USE THE 'if' OPTION.
* HERE, WE USE 'if' TO LOOK AT THE HISTOGRAM FOR A SUBSET OF OUR DATA.
* SOMETIMES THIS IS HELPFUL TO VISUALIZE HOW OUTLIERS MAY BE AFFECTING THE DISTRIBUTION.

table edu, contents(mean labor_income)
table edu, contents(median labor_income)
* THESE TABLES ALLOW US TO SEE THE MEAN INCOME AND MEDIAN INCOME PER EDUCATIONAL LEVEL.
* THE DEFAULT SPECIFICATION FOR 'table' IS 'contents(freq)' WHICH PRODUCES FREQUENCIES (AS WE DID EARLIER).
* THESE COMMANDS PROVIDE SIMILAR OUTPUTS TO THE 'tab-sum' COMMANDS.
* NOT AN OPTION FROM STATA 17

table edu, contents(max labor_income)
table edu, contents(min labor_income)
table edu, contents(sd labor_income)
* YOU CAN ALSO SEE A NUMBER OF OTHER SUMMARY STATISTICS WITH THIS OPTION.
* HERE WE SPECIFY THE MAXIMUM, MINIMUM AND STANDARD DEVIATION FOR LABOR INCOME IN EACH EDUCATIONAL GROUP.


* WE CAN ALSO CALCULATE MEANS, MEDIANS, OR OTHER STATISTICS BY CREATING A NEW VARIABLE.
* FIRST, WE NEED TO ARRANGE OUR DATA.

sort age labor_income name
* THE 'sort' COMMAND TELLS STATA TO ARRANGE THE OBSERVATIONS FROM SMALLEST TO LARGEST (OR FROM A TO Z).
* EACH VARIABLE IN THE COMMAND REPRESENTS A LEVEL FOR SORTING.
* SO, FIRST 'age' IS SORTED FROM SMALLEST TO LARGEST. 
* THEN, WITHIN EACH VALUE OF 'age', 'labor_income' WILL BE SORTED FROM SMALLEST TO LARGEST, ETC.

gsort age -labor_income
* THE 'gsort' COMMAND ALLOWS US TO SORT THINGS FROM LARGEST TO SMALLEST.
* IN THIS CASE, WE SORT AGE FROM SMALLEST TO LARGEST, THEN WITHIN EACH VALUE OF 'age', WE SORT INCOME FROM LARGEST TO SMALLEST.

bysort education: egen mean_inc = mean(labor_income)
* WE CAN ALSO SIMPLY USE THE 'bysort' COMMAND, WHICH IS A PREFIX TO OTHER COMMANDS.
* THIS ELIMINATES THE NEED FOR SEVERAL LINES OF CODE.
* 'egen' IS A POWERFUL COMMAND THAT ALLOWS US TO GENERATE VARIABLES ACROSS OBSERVATIONS.

sort education
br name education labor_income mean_inc
* TAKE A LOOK AT WHAT THE COMMAND HAS DONE.

twoway bar mean_inc education, title(Mean Income by Years of Education) ytitle(Mean Income) xtitle(Years of Education)
* THIS GIVES US A BAR CHART WITH mean_inc ON THE Y-AXIS AND education ON THE X-AXIS.
* 'twoway' IS A GRAPH TYPE WHICH ALLOWS FOR TWO VARIABLES.
* TYPE 'help twoway' TO READ ABOUT DIFFERENT GRAPH TYPES AND OPTIONS.

corr education labor_income, covariance
* WE CAN USE 'corr', SHORT FOR 'correlate', TO FIND OUT THE COVARIANCE OF EDUCATION AND INCOME.
* THE COVARIANCE IS POSITIVE, INDICATING THAT HIGHER EDUCATIONAL ATTAINMENT TENDS TO OCCURR WITH HIGHER INCOME LEVELS.

corr education labor_income
* IF WE DON'T SPECIFY THE 'covariance' OPTION, WE GET PEARSON'S CORRELATION COEFFICIENT.
* IT IS A STANDARDIZED COEFFICIENT VARYING FROM -1 TO 1 AND MEASURING THE STRENGTH OF ASSOCIATION BETWEEN TWO VARIABLES.
* THE COEFFICIENT TELLS US THAT EDUCATION AND INCOME TEND TO BE POSITIVELY RELATED.

reg labor_income education age
* THIS IS HOW YOU RUN AN OLS REGRESSION MODEL.
* THE FIRST VARIABLE IN THE LIST IS THE DEPENDENT VARIABLE, THEN COME THE EXPLANATORY VARIABLES.
* TYPE 'help reg' TO READ ABOUT REGRESSION COMMANDS AND OPTIONS.

log close
* WE CLOSE THE LOG FILE. YOU HAVE TO CLOSE AN OPEN LOG FILE BEFORE YOU CAN OPEN A NEW ONE.
* YOU CAN FIND THE LOG FILE IN YOUR CHOSEN WORKING DIRECTORY AND GO OVER EVERYTHING YOU JUST DID.

save Introduction_to_Stata_data1_modified.dta, replace
* REMEMBER TO SAVE YOU EDITED DATASET AS A NEW DATASET IF YOU WANT TO WORK WITH IT WITHOUT HAVING TO RUN THE DO-FILE AGAIN.
* THE NEW DATASET, ALONG WITH THE ORIGINAL, CAN BE FOUND IN THE WORKING DIRECTORY.

clear
* THIS REMOVES ALL DATA FROM MEMORY.


***IMPORTING DATA FROM EXCEL***

edit
* SIMPLY COPY DATASET FROM EXCEL AND PASTE INTO STATA DATA EDITOR.
* DATA IN EXCEL SHOULD BE ORGANIZED SO THAT ROWS ARE OBSERVATIONS AND COLUMNS ARE VARIABLES.
* MAKE SURE THE FIRST ROW OF EACH COLUMN IS A VARIABLE NAME, STARTING WITH A LETTER AND NOT A NUMBER.
* RUN AN INTERNET SEARCH IF YOU ENCOUNTER PROBLEMS, ANSWERS TO MOST QUESTIONS TEND TO BE AVAILABLE ONLINE.

save Introduction_to_Stata_data2_.dta, replace
* YOU CAN SAVE THE DATA IN STATA FORMAT FOR FUTURE USE.
